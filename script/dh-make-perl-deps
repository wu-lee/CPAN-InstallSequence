#!/usr/bin/perl
use strict;
use warnings;

# This is an experimental wrapper around dh-make-perl.
#
# Usage:
#  dh-make-perl-deps <module-or-dist-name>
#
# dh-make-perl works well for a single package, but does not follow
# dependencies.  This uses CPAN::InstallSequence module install
# sequence, then builds them into Debian packages using dh-make-perl.
#
# FIXME certain parameters such as DEBEMAIL, $user, $fetch_dir and
# $build_dir are hardwired for now, but need to be configurable.

use CPAN::InstallSequence;
use CPANPLUS::Backend;
use File::Glob qw(bsd_glob);
use File::HomeDir;
use File::Path qw(mkpath);
use Getopt::Long;
use Sys::Hostname qw(hostname);


my $module_name = shift 
    or die "Please supply the name of a perl module\n";

# Some defaults
my $user = $ENV{USER} || $ENV{LOGNAME};
my $hostname = hostname;
my $email = "$user\@$hostname";
my $data_dir = File::Spec->catdir(File::HomeDir->my_home, '.dh-make-perl-deps');

# Override the defaults with any CLI options passed:
my $result = GetOptions('user=s' => \$user,
                        'email=s' => \$email,
                        'data-dir=s' => \$data_dir);
# FIXME check these values


$ENV{DEBEMAIL} ||= $email;

my $fetch_dir = File::Spec->catdir($data_dir, 'source');
my $build_dir = File::Spec->catdir($data_dir, 'build');
my $DEL_SOURCE = 0;


mkpath $_ for $fetch_dir, $build_dir;


# Suppress CPANPLUS::Backend errors, since there can be many
# unuseful errors warning that parse_module failed.
local *CPANPLUS::Error::ERROR_FH;
open $CPANPLUS::Error::ERROR_FH, ">", File::Spec->devnull;

my $conf = CPANPLUS::Configure->new;
$conf->set_conf(
	prereqs => 1,
    allow_build_interactivity => 0,
    show_startup_tip => 0,
	dist_type => '',
	skiptest => 0,
	extractdir => $build_dir,
	fetchdir => $fetch_dir,
);
my $cpan = CPANPLUS::Backend->new($conf);


my @deps = CPAN::InstallSequence::finddeps(
    $module_name,
#    module_version => 0,
    cpan_backend => $cpan,
);


$_ = $_->{name}
    for @deps;

print "$_\n" for @deps;

run(@deps);

sub run {
    local @INC = @INC;
    local $ENV{PERL5LIB};

    foreach my $dep (@_) {
        my $module = _parse_module($cpan, $dep);
        warn("failed to find module metadata for $dep\n"), next
            unless $module;

        $module->fetch;
        $module->extract;
        my $ext_dir = $module->status->extract;

        # check the extract worked
        warn("failed to fetch and extract ",$module->name,", skipping\n"), next
            unless defined $ext_dir;

        $module->add_to_includepath;

        # don't build this dir if it's already been built
        my $deb_link = "$ext_dir/.deb";
		next if -f $deb_link;


		my @opts =  (qw/--notest --build/);

		# if there is a debian dir existing, don't clobber it, 
		# just refresh, since it may contain manual tweaks
        push @opts, '--refresh'
          if -e "$ext_dir/debian";


        my $deb = lc sprintf "lib%s-perl", $module->package_name;            
        my $version = version->new($module->package_version);
        (my $norm_version = $version->normal) =~ s/^v//;

        local $ENV{DEB_BUILD_OPTIONS} = 'nocheck';
		my @command = (qw/dh-make-perl --version/, "$norm_version-0.0~$user", @opts, $ext_dir);
		warn("failed to execute, skipping: @command\n"), next 
			unless system(@command) == 0;

		rmtree($ext_dir), next
			if $DEL_SOURCE;
	
		# mark this dir as built - create a symlink in it to the .deb built from it
		my ($deb_path) = bsd_glob "$ext_dir/../$deb*.deb";
		symlink $deb_path, $deb_link; 
    }
}



# This works around cases of distributions containing no similarly
# named modules which CPANPLUS-0.88 can't find.  A bug has been
# submitted.
sub _parse_module {
    my $cpan = shift;
    my $name = shift;
    my $mod = $cpan->parse_module(module => $name);
    return $mod
        if $mod;

    ($mod) = grep { $_->package_name eq $name } 
        $cpan->search( type => 'package',
                       allow => [ qr/^\Q$name\E/ ] );

    return $mod;
}
