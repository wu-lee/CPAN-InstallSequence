#!/usr/bin/perl
use strict;
use warnings;

use CPAN::FindDependencies::VersionedInstallSequence;
use Parse::CPAN::Distributions;
use CPANPLUS::Backend;
use File::Glob qw(bsd_glob);
use File::HomeDir;
use File::Path qw(mkpath);

my $module_name = shift 
    or die "Please supply the name of a perl module\n";


#use File::Path qw(mkpath);



# FIXME, actually, since these will all be the latest version, they
# needn't have versions included.  (Although, conceivably, some
# permutations of options might result with non-latest dependencies).

# FIXME need to make sure CPANPLUS doesn't pause to ask if it can download.

$ENV{DEBEMAIL} = 'dh-make-perl.5.wu-lee@spamgourmet.org';
my $user = 'npw';
my $fetch_dir = File::Spec->catdir(File::HomeDir->my_home, qw(.dh-make-perl-deps mods));
my $build_dir = File::Spec->catdir(File::HomeDir->my_home, qw(.dh-make-perl-deps build));
my $DEL_SOURCE = 0;


mkpath $_ for $fetch_dir, $build_dir;

my $conf = CPANPLUS::Configure->new;
$conf->set_conf(
	prereqs => 1,
    allow_build_interactivity => 0,
    show_startup_tip => 0,
	dist_type => '',
	skiptest => 0,
	extractdir => $build_dir,
	fetchdir => $fetch_dir,
#	verbose => 1
);
my $cpan = CPANPLUS::Backend->new($conf);


my @deps = CPAN::FindDependencies::VersionedInstallSequence::finddeps(
    $module_name,
#    module_version => 0,
    cpan_backend => $cpan,
);


# CPANPLUS needs an exact version number to work (currently, 0.88)
# so we need to be able to find the latest version with this:
#print "fetching CPAN find-ls information....\n";
#my $dists = Parse::CPAN::Distributions->new;
#print "done\n";
#
#for my $dep (@deps) {
#    # set each dep to be the full name of the latest version 
#    my $name = $dep->{name};
#    my $version = $dists->latest_version($name)
#        or die "No distribution $name known on CPAN\n";#
#
#    my $author = $dists->author_of($name, $version); 
#    $dep = "$author/$name-$version";
#}

$_ = $_->{name}
    for @deps;

#exit;
print "$_\n" for @deps;

run(@deps);

sub run {
    local @INC = @INC;
    local $ENV{PERL5LIB};

    foreach my $dep (@_) {
        #update_perl5lib();
        my $module = _parse_module($cpan, $dep);
        warn("failed to find module metadata for $dep\n"), next
            unless $module;

        $module->fetch;
        $module->extract;
        my $ext_dir = $module->status->extract;

        # check the extract worked
        warn("failed to fetch and extract ",$module->name,", skipping\n"), next
            unless defined $ext_dir;

        $module->add_to_includepath;

        # don't build this dir if it's already been built
        my $deb_link = "$ext_dir/.deb";
		next if -f $deb_link;


		my @opts =  (qw/--notest --build/);

		# if there is a debian dir existing, don't clobber it, 
		# just refresh, since it may contain manual tweaks
        push @opts, '--refresh'
          if -e "$ext_dir/debian";


        my $deb = lc sprintf "lib%s-perl", $module->package_name;            
        my $version = version->new($module->package_version);
        (my $norm_version = $version->normal) =~ s/^v//;

#		update_perl5lib();
        local $ENV{DEB_BUILD_OPTIONS} = 'nocheck';
		my @command = (qw/dh-make-perl --version/, "$norm_version-0.0~$user", @opts, $ext_dir);
		warn("failed to execute, skipping: @command\n"), next 
			unless system(@command) == 0;

		rmtree($ext_dir), next
			if $DEL_SOURCE;
	
		# mark this dir as built - create a symlink in it to the .deb built from it
		my ($deb_path) = bsd_glob "$ext_dir/../$deb*.deb";
		symlink $deb_path, $deb_link; 
    }
}



# This works around cases of distributions containing no similarly
# named modules which CPANPLUS-0.88 can't find.  A bug has been
# submitted.
sub _parse_module {
    my $cpan = shift;
    my $name = shift;
    my $mod = $cpan->parse_module(module => $name);
    return $mod
        if $mod;

    ($mod) = grep { $_->package_name eq $name } 
        $cpan->search( type => 'package',
                       allow => [ qr/^\Q$name\E/ ] );

    return $mod;
}
